import { createInterface } from "node:readline/promises";
import core from "./core.js"

const readline = createInterface({
    input: process.stdin,
    output: process.stdout,
});

const AVAILABLE_FNS = [...Object.keys(core), 'exit'].join(', ')

async function loop() {
    const fnName = await readline.question(`Ingrese funci칩n (${AVAILABLE_FNS}): `)
    const fn=core[fnName];

    if (fnName === "exit") {
        console.log("游녦游녦游녦");
        return readline.close();
    }
    if (!fn) {
        console.log(`La funci칩n "${fnName}" es incorrecta, por favor vuelva intentar`);
        return loop();
    }
    /*La funci칩n const fn = core[fnName]; toma el valor de core[fnName], es decir, toma el valor de la propiedad con nombre igual al valor de la variable fnName dentro del objeto core. Si fnName es 'add', fn tomar치 el valor de la funci칩n add dentro de core.
    Luego, el if (!fn) verifica si fn es falso, lo que suceder치 si core[fnName] no existe o es undefined. Si es as칤, se imprimir치 un mensaje de error en la consola con el nombre de la funci칩n incorrecta, y se llamar치 a la funci칩n loop() para volver a pedir al usuario que ingrese una funci칩n v치lida. */ 

    else if (fnName == "pow"){
            const powNum = await readline.question("Ingrese el n칰mero a elevar al cuadrado: ");
             //Se trata el bug de solicitar mas parametros de los necesarios para el pow cuadrado
            console.log(`El resultado del cuadrado es: ${core.pow(Number(powNum))}`);  
        }
    else {
        const firstNum = await readline.question("Ingrese el primer n칰mero: ")
        const secondNum = await readline.question("Ingrese el segundo n칰mero: ")
        switch(fnName) {
            case "add":
                console.log(`El resultado de la suma es: ${core.add(Number(firstNum), Number(secondNum))}`);
                break;
            case "sub":
                console.log(`El resultado de la resta es: ${core.sub(Number(firstNum), Number(secondNum))}`);
                break;
            case "mul":
                console.log(`El resultado de la multiplicacion es: ${core.mul(Number(firstNum), Number(secondNum))}`);
                break;    
            case "div":
            console.log(`El resultado de la division es: ${core.div(Number(firstNum), Number(secondNum))}`);

        }
    }
    loop();
    }
    
loop();